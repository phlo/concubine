;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; sorts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

1 sort bitvec 1
2 sort bitvec 16
3 sort array 2 2

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; constants
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

4 zero 1
5 one 1

6 zero 2
7 one 2
8 constd 2 12

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; memory map
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

9 state 3 mmap
10 write 3 9 6 6
11 write 3 10 7 6

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; state variable declarations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; accu variables - accu_<thread>
12 state 2 accu_0
13 state 2 accu_1
14 state 2 accu_2
15 state 2 accu_3

; mem variables - mem_<thread>
16 state 2 mem_0
17 state 2 mem_1
18 state 2 mem_2
19 state 2 mem_3

; store buffer address variables - sb-adr_<thread>
20 state 2 sb-adr_0
21 state 2 sb-adr_1
22 state 2 sb-adr_2
23 state 2 sb-adr_3

; store buffer value variables - sb-val_<thread>
24 state 2 sb-val_0
25 state 2 sb-val_1
26 state 2 sb-val_2
27 state 2 sb-val_3

; store buffer full variables - sb-full_<thread>
28 state 1 sb-full_0
29 state 1 sb-full_1
30 state 1 sb-full_2
31 state 1 sb-full_3

; statement activation variables - stmt_<thread>_<pc>
32 state 1 stmt_0_0
33 state 1 stmt_0_1
34 state 1 stmt_0_2

35 state 1 stmt_1_0
36 state 1 stmt_1_1
37 state 1 stmt_1_2

38 state 1 stmt_2_0
39 state 1 stmt_2_1
40 state 1 stmt_2_2

41 state 1 stmt_3_0
42 state 1 stmt_3_1
43 state 1 stmt_3_2

; halt variables - halt_<thread>
44 state 1 halt_0
45 state 1 halt_1
46 state 1 halt_2
47 state 1 halt_3

; heap variable
48 state 3 heap

; exit flag variable
49 state 1 exit

; exit code variable
50 state 2 exit-code

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; input variable declarations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; thread activation variables - thread_<thread>
51 input 1 thread_0
52 input 1 thread_1
53 input 1 thread_2
54 input 1 thread_3

; store buffer flush variables - flush_<thread>
55 input 1 flush_0
56 input 1 flush_1
57 input 1 flush_2
58 input 1 flush_3

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; transition variable definitions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; statement execution variables - exec_<thread>_<pc>
59 and 1 32 51 exec_0_0
60 and 1 33 51 exec_0_1
61 and 1 34 51 exec_0_2

62 and 1 35 52 exec_1_0
63 and 1 36 52 exec_1_1
64 and 1 37 52 exec_1_2

65 and 1 38 53 exec_2_0
66 and 1 39 53 exec_2_1
67 and 1 40 53 exec_2_2

68 and 1 41 54 exec_3_0
69 and 1 42 54 exec_3_1
70 and 1 43 54 exec_3_2

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; scheduling constraints
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

71 or 1 51 52
72 or 1 53 71
73 or 1 54 72
74 or 1 55 73
75 or 1 56 74
76 or 1 57 75
77 or 1 58 76
78 or 1 49 77
79 constraint 78
80 nand 1 51 52
81 nand 1 51 53
82 nand 1 51 54
83 nand 1 51 55
84 nand 1 51 56
85 nand 1 51 57
86 nand 1 51 58
87 nand 1 51 49
88 nand 1 52 53
89 nand 1 52 54
90 nand 1 52 55
91 nand 1 52 56
92 nand 1 52 57
93 nand 1 52 58
94 nand 1 52 49
95 nand 1 53 54
96 nand 1 53 55
97 nand 1 53 56
98 nand 1 53 57
99 nand 1 53 58
100 nand 1 53 49
101 nand 1 54 55
102 nand 1 54 56
103 nand 1 54 57
104 nand 1 54 58
105 nand 1 54 49
106 nand 1 55 56
107 nand 1 55 57
108 nand 1 55 58
109 nand 1 55 49
110 nand 1 56 57
111 nand 1 56 58
112 nand 1 56 49
113 nand 1 57 58
114 nand 1 57 49
115 nand 1 58 49
116 and 1 80 81
117 and 1 82 116
118 and 1 83 117
119 and 1 84 118
120 and 1 85 119
121 and 1 86 120
122 and 1 87 121
123 and 1 88 122
124 and 1 89 123
125 and 1 90 124
126 and 1 91 125
127 and 1 92 126
128 and 1 93 127
129 and 1 94 128
130 and 1 95 129
131 and 1 96 130
132 and 1 97 131
133 and 1 98 132
134 and 1 99 133
135 and 1 100 134
136 and 1 101 135
137 and 1 102 136
138 and 1 103 137
139 and 1 104 138
140 and 1 105 139
141 and 1 106 140
142 and 1 107 141
143 and 1 108 142
144 and 1 109 143
145 and 1 110 144
146 and 1 111 145
147 and 1 112 146
148 and 1 113 147
149 and 1 114 148
150 and 1 115 149
151 constraint 150

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; store buffer constraints
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

152 or 1 33 34
153 implies 1 152 -51
154 ite 1 28 153 -55
155 constraint 154 flush_0

156 or 1 36 37
157 implies 1 156 -52
158 ite 1 29 157 -56
159 constraint 158 flush_1

160 implies 1 40 -53
161 ite 1 30 160 -57
162 constraint 161 flush_2

163 implies 1 43 -54
164 ite 1 31 163 -58
165 constraint 164 flush_3

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; halt constraints
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

166 implies 1 44 -51
167 constraint 166 halt_0

168 implies 1 45 -52
169 constraint 168 halt_1

170 implies 1 46 -53
171 constraint 170 halt_2

172 implies 1 47 -54
173 constraint 172 halt_3

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; state variable definitions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; accu variables - accu_<thread>
174 init 2 12 6
175 add 2 12 7
176 ite 2 59 175 12 0:0:ADDI:1
177 read 2 48 6
178 eq 1 20 6
179 and 1 28 178
180 ite 2 179 24 177
181 eq 1 16 180
182 ite 2 181 7 6
183 ite 2 60 182 176 0:1:CAS:0
184 next 2 12 183 accu_0

185 init 2 13 6
186 add 2 13 7
187 ite 2 62 186 13 1:0:ADDI:1
188 read 2 48 7
189 eq 1 21 7
190 and 1 29 189
191 ite 2 190 25 188
192 eq 1 17 191
193 ite 2 192 7 6
194 ite 2 63 193 187 1:1:CAS:1
195 next 2 13 194 accu_1

196 init 2 14 6
197 eq 1 22 6
198 and 1 30 197
199 ite 2 198 26 177
200 ite 2 65 199 14 2:0:MEM:0
201 eq 1 22 7
202 and 1 30 201
203 ite 2 202 26 188
204 ite 2 66 203 200 2:1:LOAD:1
205 next 2 14 204 accu_2

206 init 2 15 6
207 eq 1 23 7
208 and 1 31 207
209 ite 2 208 27 188
210 ite 2 68 209 15 3:0:MEM:1
211 eq 1 23 6
212 and 1 31 211
213 ite 2 212 27 177
214 ite 2 69 213 210 3:1:LOAD:0
215 next 2 15 214 accu_3

; mem variables - mem_<thread>
216 init 2 16 6
217 next 2 16 16 mem_0

218 init 2 17 6
219 next 2 17 17 mem_1

220 init 2 18 6
221 ite 2 65 199 18 2:0:MEM:0
222 next 2 18 221 mem_2

223 init 2 19 6
224 ite 2 68 209 19 3:0:MEM:1
225 next 2 19 224 mem_3

; store buffer address variables - sb-adr_<thread>
226 init 2 20 6
227 next 2 20 20 sb-adr_0

228 init 2 21 6
229 next 2 21 21 sb-adr_1

230 init 2 22 6
231 next 2 22 22 sb-adr_2

232 init 2 23 6
233 next 2 23 23 sb-adr_3

; store buffer value variables - sb-val_<thread>
234 init 2 24 6
235 next 2 24 24 sb-val_0

236 init 2 25 6
237 next 2 25 25 sb-val_1

238 init 2 26 6
239 next 2 26 26 sb-val_2

240 init 2 27 6
241 next 2 27 27 sb-val_3

; store buffer full variables - sb-full_<thread>
242 init 1 28 4
243 ite 1 55 4 28
244 next 1 28 243 sb-full_0

245 init 1 29 4
246 ite 1 56 4 29
247 next 1 29 246 sb-full_1

248 init 1 30 4
249 ite 1 57 4 30
250 next 1 30 249 sb-full_2

251 init 1 31 4
252 ite 1 58 4 31
253 next 1 31 252 sb-full_3

; statement activation variables - stmt_<thread>_<pc>
254 init 1 32 5
255 and 1 32 -59 0:0:ADDI:1
256 next 1 32 255 stmt_0_0

257 init 1 33 4
258 and 1 33 -60 0:1:CAS:0
259 ite 1 32 59 258 0:0:ADDI:1
260 next 1 33 259 stmt_0_1

261 init 1 34 4
262 and 1 34 -61 0:2:HALT
263 ite 1 33 60 262 0:1:CAS:0
264 next 1 34 263 stmt_0_2

265 init 1 35 5
266 and 1 35 -62 1:0:ADDI:1
267 next 1 35 266 stmt_1_0

268 init 1 36 4
269 and 1 36 -63 1:1:CAS:1
270 ite 1 35 62 269 1:0:ADDI:1
271 next 1 36 270 stmt_1_1

272 init 1 37 4
273 and 1 37 -64 1:2:HALT
274 ite 1 36 63 273 1:1:CAS:1
275 next 1 37 274 stmt_1_2

276 init 1 38 5
277 and 1 38 -65 2:0:MEM:0
278 next 1 38 277 stmt_2_0

279 init 1 39 4
280 and 1 39 -66 2:1:LOAD:1
281 ite 1 38 65 280 2:0:MEM:0
282 next 1 39 281 stmt_2_1

283 init 1 40 4
284 and 1 40 -67 2:2:HALT
285 ite 1 39 66 284 2:1:LOAD:1
286 next 1 40 285 stmt_2_2

287 init 1 41 5
288 and 1 41 -68 3:0:MEM:1
289 next 1 41 288 stmt_3_0

290 init 1 42 4
291 and 1 42 -69 3:1:LOAD:0
292 ite 1 41 68 291 3:0:MEM:1
293 next 1 42 292 stmt_3_1

294 init 1 43 4
295 and 1 43 -70 3:2:HALT
296 ite 1 42 69 295 3:1:LOAD:0
297 next 1 43 296 stmt_3_2

; halt variables - halt_<thread>
298 init 1 44 4
299 or 1 61 44
300 next 1 44 299 halt_0

301 init 1 45 4
302 or 1 64 45
303 next 1 45 302 halt_1

304 init 1 46 4
305 or 1 67 46
306 next 1 46 305 halt_2

307 init 1 47 4
308 or 1 70 47
309 next 1 47 308 halt_3

; heap variable
310 init 3 48 11
311 write 3 48 20 24
312 ite 3 55 311 48 flush_0
313 write 3 48 6 12
314 ite 3 181 313 48
315 ite 3 60 314 312 0:1:CAS:0
316 write 3 48 21 25
317 ite 3 56 316 315 flush_1
318 write 3 48 7 13
319 ite 3 192 318 48
320 ite 3 63 319 317 1:1:CAS:1
321 write 3 48 22 26
322 ite 3 57 321 320 flush_2
323 write 3 48 23 27
324 ite 3 58 323 322 flush_3
325 next 3 48 324 heap

; exit flag variable
326 init 1 49 4
327 and 1 299 302
328 and 1 305 327
329 and 1 308 328
330 or 1 49 329
331 next 1 49 330 exit

; exit code variable
332 init 2 50 6
333 next 2 50 50 exit-code

