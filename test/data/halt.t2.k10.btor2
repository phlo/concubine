;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; sorts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

1 sort bitvec 1
2 sort bitvec 16
3 sort array 2 2

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; constants
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

4 zero 1
5 one 1

6 zero 2
7 one 2
8 constd 2 2
9 constd 2 10

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; state variable declarations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; accu variables - accu_<thread>
10 state 2 accu_0
11 state 2 accu_1

; mem variables - mem_<thread>
12 state 2 mem_0
13 state 2 mem_1

; store buffer address variables - sb-adr_<thread>
14 state 2 sb-adr_0
15 state 2 sb-adr_1

; store buffer value variables - sb-val_<thread>
16 state 2 sb-val_0
17 state 2 sb-val_1

; store buffer full variables - sb-full_<thread>
18 state 1 sb-full_0
19 state 1 sb-full_1

; statement activation variables - stmt_<thread>_<pc>
20 state 1 stmt_0_0
21 state 1 stmt_0_1
22 state 1 stmt_0_2

23 state 1 stmt_1_0
24 state 1 stmt_1_1
25 state 1 stmt_1_2

; halt variables - halt_<thread>
26 state 1 halt_0
27 state 1 halt_1

; heap variable
28 state 3 heap

; exit flag variable
29 state 1 exit

; exit code variable
30 state 2 exit-code

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; input variable declarations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; thread activation variables - thread_<thread>
31 input 1 thread_0
32 input 1 thread_1

; store buffer flush variables - flush_<thread>
33 input 1 flush_0
34 input 1 flush_1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; transition variable definitions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; statement execution variables - exec_<thread>_<pc>
35 and 1 20 31 exec_0_0
36 and 1 21 31 exec_0_1
37 and 1 22 31 exec_0_2

38 and 1 23 32 exec_1_0
39 and 1 24 32 exec_1_1
40 and 1 25 32 exec_1_2

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; scheduling constraints
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

41 or 1 31 32
42 or 1 33 41
43 or 1 34 42
44 or 1 29 43
45 constraint 44
46 nand 1 31 32
47 nand 1 31 33
48 nand 1 31 34
49 nand 1 31 29
50 nand 1 32 33
51 nand 1 32 34
52 nand 1 32 29
53 nand 1 33 34
54 nand 1 33 29
55 nand 1 34 29
56 and 1 46 47
57 and 1 48 56
58 and 1 49 57
59 and 1 50 58
60 and 1 51 59
61 and 1 52 60
62 and 1 53 61
63 and 1 54 62
64 and 1 55 63
65 constraint 64

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; store buffer constraints
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

66 implies 1 21 -31
67 ite 1 18 66 -33
68 constraint 67 flush_0

69 implies 1 24 -32
70 ite 1 19 69 -34
71 constraint 70 flush_1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; halt constraints
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

72 implies 1 26 -31
73 constraint 72 halt_0

74 implies 1 27 -32
75 constraint 74 halt_1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; state variable definitions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; accu variables - accu_<thread>
76 init 2 10 6
77 next 2 10 10 accu_0

78 init 2 11 6
79 next 2 11 11 accu_1

; mem variables - mem_<thread>
80 init 2 12 6
81 next 2 12 12 mem_0

82 init 2 13 6
83 next 2 13 13 mem_1

; store buffer address variables - sb-adr_<thread>
84 init 2 14 6
85 next 2 14 14 sb-adr_0

86 init 2 15 6
87 next 2 15 15 sb-adr_1

; store buffer value variables - sb-val_<thread>
88 init 2 16 6
89 next 2 16 16 sb-val_0

90 init 2 17 6
91 next 2 17 17 sb-val_1

; store buffer full variables - sb-full_<thread>
92 init 1 18 4
93 ite 1 33 4 18
94 next 1 18 93 sb-full_0

95 init 1 19 4
96 ite 1 34 4 19
97 next 1 19 96 sb-full_1

; statement activation variables - stmt_<thread>_<pc>
98 init 1 20 5
99 and 1 20 -35 0:0:JNZ:2
100 next 1 20 99 stmt_0_0

101 init 1 21 4
102 and 1 21 -36 0:1:HALT
103 neq 1 10 6
104 and 1 35 -103
105 ite 1 20 104 102 0:0:JNZ:2
106 next 1 21 105 stmt_0_1

107 init 1 22 4
108 and 1 22 -37 0:2:EXIT:1
109 and 1 35 103
110 ite 1 20 109 108 0:0:JNZ:2
111 next 1 22 110 stmt_0_2

112 init 1 23 5
113 and 1 23 -38 1:0:JNZ:2
114 next 1 23 113 stmt_1_0

115 init 1 24 4
116 and 1 24 -39 1:1:HALT
117 neq 1 11 6
118 and 1 38 -117
119 ite 1 23 118 116 1:0:JNZ:2
120 next 1 24 119 stmt_1_1

121 init 1 25 4
122 and 1 25 -40 1:2:EXIT:1
123 and 1 38 117
124 ite 1 23 123 122 1:0:JNZ:2
125 next 1 25 124 stmt_1_2

; halt variables - halt_<thread>
126 init 1 26 4
127 or 1 36 26
128 next 1 26 127 halt_0

129 init 1 27 4
130 or 1 39 27
131 next 1 27 130 halt_1

; heap variable
132 write 3 28 14 16
133 ite 3 33 132 28 flush_0
134 write 3 28 15 17
135 ite 3 34 134 133 flush_1
136 next 3 28 135 heap

; exit flag variable
137 init 1 29 4
138 and 1 127 130
139 or 1 29 138
140 or 1 37 139
141 or 1 40 140
142 next 1 29 141 exit

; exit code variable
143 init 2 30 6
144 ite 2 37 7 30 0:2:EXIT:1
145 ite 2 40 7 144 1:2:EXIT:1
146 next 2 30 145 exit-code

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; bound
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; step counter
147 state 2 k
148 init 2 147 6
149 add 2 7 147
150 next 2 147 149

; bound (10)
151 eq 1 9 147
152 bad 151
