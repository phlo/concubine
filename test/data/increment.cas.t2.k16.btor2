;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; sorts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

1 sort bitvec 1
2 sort bitvec 16
3 sort array 2 2

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; constants
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

4 zero 1
5 one 1

6 zero 2
7 one 2
8 constd 2 2
9 constd 2 16

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; machine state declarations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; heap
10 state 3 heap

; accumulator registers - accu_<thread>
11 state 2 accu_0
12 state 2 accu_1

; CAS memory registers - mem_<thread>
13 state 2 mem_0
14 state 2 mem_1

; statement activation flags - stmt_<thread>_<pc>
15 state 1 stmt_0_0
16 state 1 stmt_0_1
17 state 1 stmt_0_2
18 state 1 stmt_0_3
19 state 1 stmt_0_4
20 state 1 stmt_0_5

21 state 1 stmt_1_0
22 state 1 stmt_1_1
23 state 1 stmt_1_2
24 state 1 stmt_1_3
25 state 1 stmt_1_4
26 state 1 stmt_1_5

; exit flag
27 state 1 exit

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; thread scheduling
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

28 input 1 thread_0
29 input 1 thread_1

; cardinality constraint
30 or 1 28 29
31 or 1 27 30
32 constraint 31
33 nand 1 28 29
34 nand 1 28 27
35 nand 1 29 27
36 and 1 33 34
37 and 1 35 36
38 constraint 37

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; statement execution - exec_<thread>_<pc>
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

39 and 1 15 28 exec_0_0
40 and 1 16 28 exec_0_1
41 and 1 17 28 exec_0_2
42 and 1 18 28 exec_0_3
43 and 1 19 28 exec_0_4
44 and 1 20 28 exec_0_5

45 and 1 21 29 exec_1_0
46 and 1 22 29 exec_1_1
47 and 1 23 29 exec_1_2
48 and 1 24 29 exec_1_3
49 and 1 25 29 exec_1_4
50 and 1 26 29 exec_1_5

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; statement activation state definitions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; stmt_0_0
51 init 1 15 5
52 and 1 15 -39
53 next 1 15 52 0:0:STORE:0

; stmt_0_1
54 init 1 16 4
55 and 1 16 -40
56 ite 1 15 39 55 0:0:STORE:0
57 next 1 16 56 0:1:SYNC:0

; stmt_0_2
58 init 1 17 4
59 and 1 17 -41
60 ite 1 16 40 59 0:1:SYNC:0
61 ite 1 20 44 60 0:5:JMP:2
62 next 1 17 61 0:2:MEM:0

; stmt_0_3
63 init 1 18 4
64 and 1 18 -42
65 ite 1 17 41 64 0:2:MEM:0
66 next 1 18 65 0:3:ADDI:1

; stmt_0_4
67 init 1 19 4
68 and 1 19 -43
69 ite 1 18 42 68 0:3:ADDI:1
70 next 1 19 69 0:4:CAS:0

; stmt_0_5
71 init 1 20 4
72 and 1 20 -44
73 ite 1 19 43 72 0:4:CAS:0
74 next 1 20 73 0:5:JMP:2

; stmt_1_0
75 init 1 21 5
76 and 1 21 -45
77 next 1 21 76 1:0:STORE:0

; stmt_1_1
78 init 1 22 4
79 and 1 22 -46
80 ite 1 21 45 79 1:0:STORE:0
81 next 1 22 80 1:1:SYNC:0

; stmt_1_2
82 init 1 23 4
83 and 1 23 -47
84 ite 1 22 46 83 1:1:SYNC:0
85 ite 1 26 50 84 1:5:JMP:2
86 next 1 23 85 1:2:MEM:0

; stmt_1_3
87 init 1 24 4
88 and 1 24 -48
89 ite 1 23 47 88 1:2:MEM:0
90 next 1 24 89 1:3:ADDI:1

; stmt_1_4
91 init 1 25 4
92 and 1 25 -49
93 ite 1 24 48 92 1:3:ADDI:1
94 next 1 25 93 1:4:CAS:0

; stmt_1_5
95 init 1 26 4
96 and 1 26 -50
97 ite 1 25 49 96 1:4:CAS:0
98 next 1 26 97 1:5:JMP:2

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; register state definitions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; accumulator definitions ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; accu_0
99 init 2 11 6
100 read 2 10 6
101 ite 2 41 100 11 0:2:MEM:0
102 add 2 11 7
103 ite 2 42 102 101 0:3:ADDI:1
104 eq 1 13 100
105 ite 2 104 7 6
106 ite 2 43 105 103 0:4:CAS:0
107 next 2 11 106 accu_0

; accu_1
108 init 2 12 6
109 ite 2 47 100 12 1:2:MEM:0
110 add 2 12 7
111 ite 2 48 110 109 1:3:ADDI:1
112 eq 1 14 100
113 ite 2 112 7 6
114 ite 2 49 113 111 1:4:CAS:0
115 next 2 12 114 accu_1

; CAS memory register definitions ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; mem_0
116 init 2 13 6
117 ite 2 41 100 13 0:2:MEM:0
118 next 2 13 117 mem_0

; mem_1
119 init 2 14 6
120 ite 2 47 100 14 1:2:MEM:0
121 next 2 14 120 mem_1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; heap state definition
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

122 write 3 10 6 11
123 ite 3 39 122 10 0:0:STORE:0
124 eq 1 13 100
125 ite 3 124 122 10
126 ite 3 43 125 123 0:4:CAS:0
127 write 3 10 6 12
128 ite 3 45 127 126 1:0:STORE:0
129 eq 1 14 100
130 ite 3 129 127 10
131 ite 3 49 130 128 1:4:CAS:0
132 next 3 10 131 heap

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; exit state definitions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; exit flag
133 init 1 27 4
134 next 1 27 27 exit

; exit code
135 state 2 exit-code
136 init 2 135 6
137 next 2 135 135 exit-code

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; synchronization constraints
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; thread blocking flags - block_<id>_<thread>
138 state 1 block_0_0
139 state 1 block_0_1

; synchronization flags - sync_<id>
140 and 1 138 139 sync_0

; thread blocking flag definitions
141 init 1 138 4
142 or 1 40 138
143 ite 1 140 4 142
144 next 1 138 143 block_0_0

145 init 1 139 4
146 or 1 46 139
147 ite 1 140 4 146
148 next 1 139 147 block_0_1

; prevent scheduling of blocked threads
149 and 1 138 -140
150 implies 1 149 -28
151 constraint 150 block_0_0

152 and 1 139 -140
153 implies 1 152 -29
154 constraint 153 block_0_1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; bound
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; step counter
155 state 2 k
156 init 2 155 6
157 add 2 7 155
158 next 2 155 157

; bound (16)
159 eq 1 9 155
160 bad 159
