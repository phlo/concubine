;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; sorts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

1 sort bitvec 1
2 sort bitvec 16
3 sort array 2 2

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; constants
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

4 zero 1
5 one 1

6 zero 2
7 one 2
8 constd 2 10

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; memory map
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

9 state 3 mmap
10 write 3 9 6 6
11 write 3 10 7 6

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; state variable declarations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; accu variables - accu_<thread>
12 state 2 accu_0
13 state 2 accu_1

; mem variables - mem_<thread>
14 state 2 mem_0
15 state 2 mem_1

; store buffer address variables - sb-adr_<thread>
16 state 2 sb-adr_0
17 state 2 sb-adr_1

; store buffer value variables - sb-val_<thread>
18 state 2 sb-val_0
19 state 2 sb-val_1

; store buffer full variables - sb-full_<thread>
20 state 1 sb-full_0
21 state 1 sb-full_1

; statement activation variables - stmt_<thread>_<pc>
22 state 1 stmt_0_0
23 state 1 stmt_0_1
24 state 1 stmt_0_2
25 state 1 stmt_0_3

26 state 1 stmt_1_0
27 state 1 stmt_1_1
28 state 1 stmt_1_2
29 state 1 stmt_1_3

; halt variables - halt_<thread>
30 state 1 halt_0
31 state 1 halt_1

; heap variable
32 state 3 heap

; exit flag variable
33 state 1 exit

; exit code variable
34 state 2 exit-code

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; input variable declarations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; thread activation variables - thread_<thread>
35 input 1 thread_0
36 input 1 thread_1

; store buffer flush variables - flush_<thread>
37 input 1 flush_0
38 input 1 flush_1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; transition variable definitions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; statement execution variables - exec_<thread>_<pc>
39 and 1 22 35 exec_0_0
40 and 1 23 35 exec_0_1
41 and 1 24 35 exec_0_2
42 and 1 25 35 exec_0_3

43 and 1 26 36 exec_1_0
44 and 1 27 36 exec_1_1
45 and 1 28 36 exec_1_2
46 and 1 29 36 exec_1_3

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; scheduling constraints
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

47 or 1 35 36
48 or 1 37 47
49 or 1 38 48
50 or 1 33 49
51 constraint 50
52 nand 1 35 36
53 nand 1 35 37
54 nand 1 35 38
55 nand 1 35 33
56 nand 1 36 37
57 nand 1 36 38
58 nand 1 36 33
59 nand 1 37 38
60 nand 1 37 33
61 nand 1 38 33
62 and 1 52 53
63 and 1 54 62
64 and 1 55 63
65 and 1 56 64
66 and 1 57 65
67 and 1 58 66
68 and 1 59 67
69 and 1 60 68
70 and 1 61 69
71 constraint 70

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; store buffer constraints
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

72 or 1 24 25
73 implies 1 72 -35
74 ite 1 20 73 -37
75 constraint 74 flush_0

76 or 1 28 29
77 implies 1 76 -36
78 ite 1 21 77 -38
79 constraint 78 flush_1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; halt constraints
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

80 implies 1 30 -35
81 constraint 80 halt_0

82 implies 1 31 -36
83 constraint 82 halt_1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; state variable definitions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; accu variables - accu_<thread>
84 init 2 12 6
85 read 2 32 6
86 eq 1 16 6
87 and 1 20 86
88 ite 2 87 18 85
89 ite 2 39 88 12 0:0:MEM:0
90 add 2 12 7
91 ite 2 40 90 89 0:1:ADDI:1
92 next 2 12 91 accu_0

93 init 2 13 6
94 read 2 32 7
95 eq 1 17 7
96 and 1 21 95
97 ite 2 96 19 94
98 ite 2 43 97 13 1:0:MEM:1
99 add 2 13 7
100 ite 2 44 99 98 1:1:ADDI:1
101 next 2 13 100 accu_1

; mem variables - mem_<thread>
102 init 2 14 6
103 ite 2 39 88 14 0:0:MEM:0
104 next 2 14 103 mem_0

105 init 2 15 6
106 ite 2 43 97 15 1:0:MEM:1
107 next 2 15 106 mem_1

; store buffer address variables - sb-adr_<thread>
108 init 2 16 6
109 ite 2 41 7 16 0:2:STORE:1
110 next 2 16 109 sb-adr_0

111 init 2 17 6
112 ite 2 45 6 17 1:2:STORE:0
113 next 2 17 112 sb-adr_1

; store buffer value variables - sb-val_<thread>
114 init 2 18 6
115 ite 2 41 12 18 0:2:STORE:1
116 next 2 18 115 sb-val_0

117 init 2 19 6
118 ite 2 45 13 19 1:2:STORE:0
119 next 2 19 118 sb-val_1

; store buffer full variables - sb-full_<thread>
120 init 1 20 4
121 or 1 41 20
122 ite 1 37 4 121
123 next 1 20 122 sb-full_0

124 init 1 21 4
125 or 1 45 21
126 ite 1 38 4 125
127 next 1 21 126 sb-full_1

; statement activation variables - stmt_<thread>_<pc>
128 init 1 22 5
129 and 1 22 -39 0:0:MEM:0
130 next 1 22 129 stmt_0_0

131 init 1 23 4
132 and 1 23 -40 0:1:ADDI:1
133 ite 1 22 39 132 0:0:MEM:0
134 next 1 23 133 stmt_0_1

135 init 1 24 4
136 and 1 24 -41 0:2:STORE:1
137 ite 1 23 40 136 0:1:ADDI:1
138 next 1 24 137 stmt_0_2

139 init 1 25 4
140 and 1 25 -42 0:3:HALT
141 ite 1 24 41 140 0:2:STORE:1
142 next 1 25 141 stmt_0_3

143 init 1 26 5
144 and 1 26 -43 1:0:MEM:1
145 next 1 26 144 stmt_1_0

146 init 1 27 4
147 and 1 27 -44 1:1:ADDI:1
148 ite 1 26 43 147 1:0:MEM:1
149 next 1 27 148 stmt_1_1

150 init 1 28 4
151 and 1 28 -45 1:2:STORE:0
152 ite 1 27 44 151 1:1:ADDI:1
153 next 1 28 152 stmt_1_2

154 init 1 29 4
155 and 1 29 -46 1:3:HALT
156 ite 1 28 45 155 1:2:STORE:0
157 next 1 29 156 stmt_1_3

; halt variables - halt_<thread>
158 init 1 30 4
159 or 1 42 30
160 next 1 30 159 halt_0

161 init 1 31 4
162 or 1 46 31
163 next 1 31 162 halt_1

; heap variable
164 init 3 32 11
165 write 3 32 16 18
166 ite 3 37 165 32 flush_0
167 write 3 32 17 19
168 ite 3 38 167 166 flush_1
169 next 3 32 168 heap

; exit flag variable
170 init 1 33 4
171 and 1 159 162
172 or 1 33 171
173 next 1 33 172 exit

; exit code variable
174 init 2 34 6
175 next 2 34 34 exit-code

