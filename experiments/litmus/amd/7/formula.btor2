;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; sorts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

1 sort bitvec 1
2 sort bitvec 16
3 sort array 2 2

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; constants
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

4 zero 1
5 one 1

6 zero 2
7 one 2
8 constd 2 3
9 constd 2 13

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; memory map
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

10 state 3 mmap
11 write 3 10 6 6
12 write 3 11 7 6

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; state variable declarations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; accu variables - accu_<thread>
13 state 2 accu_0
14 state 2 accu_1
15 state 2 accu_2

; mem variables - mem_<thread>
16 state 2 mem_0
17 state 2 mem_1
18 state 2 mem_2

; store buffer address variables - sb-adr_<thread>
19 state 2 sb-adr_0
20 state 2 sb-adr_1
21 state 2 sb-adr_2

; store buffer value variables - sb-val_<thread>
22 state 2 sb-val_0
23 state 2 sb-val_1
24 state 2 sb-val_2

; store buffer full variables - sb-full_<thread>
25 state 1 sb-full_0
26 state 1 sb-full_1
27 state 1 sb-full_2

; statement activation variables - stmt_<thread>_<pc>
28 state 1 stmt_0_0
29 state 1 stmt_0_1
30 state 1 stmt_0_2

31 state 1 stmt_1_0
32 state 1 stmt_1_1
33 state 1 stmt_1_2
34 state 1 stmt_1_3
35 state 1 stmt_1_4

36 state 1 stmt_2_0
37 state 1 stmt_2_1
38 state 1 stmt_2_2

; halt variables - halt_<thread>
39 state 1 halt_0
40 state 1 halt_1
41 state 1 halt_2

; heap variable
42 state 3 heap

; exit flag variable
43 state 1 exit

; exit code variable
44 state 2 exit-code

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; input variable declarations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; thread activation variables - thread_<thread>
45 input 1 thread_0
46 input 1 thread_1
47 input 1 thread_2

; store buffer flush variables - flush_<thread>
48 input 1 flush_0
49 input 1 flush_1
50 input 1 flush_2

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; transition variable definitions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; statement execution variables - exec_<thread>_<pc>
51 and 1 28 45 exec_0_0
52 and 1 29 45 exec_0_1
53 and 1 30 45 exec_0_2

54 and 1 31 46 exec_1_0
55 and 1 32 46 exec_1_1
56 and 1 33 46 exec_1_2
57 and 1 34 46 exec_1_3
58 and 1 35 46 exec_1_4

59 and 1 36 47 exec_2_0
60 and 1 37 47 exec_2_1
61 and 1 38 47 exec_2_2

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; scheduling constraints
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

62 or 1 45 46
63 or 1 47 62
64 or 1 48 63
65 or 1 49 64
66 or 1 50 65
67 or 1 43 66
68 constraint 67
69 nand 1 45 46
70 nand 1 45 47
71 nand 1 45 48
72 nand 1 45 49
73 nand 1 45 50
74 nand 1 45 43
75 nand 1 46 47
76 nand 1 46 48
77 nand 1 46 49
78 nand 1 46 50
79 nand 1 46 43
80 nand 1 47 48
81 nand 1 47 49
82 nand 1 47 50
83 nand 1 47 43
84 nand 1 48 49
85 nand 1 48 50
86 nand 1 48 43
87 nand 1 49 50
88 nand 1 49 43
89 nand 1 50 43
90 and 1 69 70
91 and 1 71 90
92 and 1 72 91
93 and 1 73 92
94 and 1 74 93
95 and 1 75 94
96 and 1 76 95
97 and 1 77 96
98 and 1 78 97
99 and 1 79 98
100 and 1 80 99
101 and 1 81 100
102 and 1 82 101
103 and 1 83 102
104 and 1 84 103
105 and 1 85 104
106 and 1 86 105
107 and 1 87 106
108 and 1 88 107
109 and 1 89 108
110 constraint 109

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; store buffer constraints
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

111 or 1 29 30
112 implies 1 111 -45
113 ite 1 25 112 -48
114 constraint 113 flush_0

115 or 1 34 35
116 implies 1 115 -46
117 ite 1 26 116 -49
118 constraint 117 flush_1

119 implies 1 38 -47
120 ite 1 27 119 -50
121 constraint 120 flush_2

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; halt constraints
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

122 implies 1 39 -45
123 constraint 122 halt_0

124 implies 1 40 -46
125 constraint 124 halt_1

126 implies 1 41 -47
127 constraint 126 halt_2

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; state variable definitions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; accu variables - accu_<thread>
128 init 2 13 6
129 add 2 13 7
130 ite 2 51 129 13 0:0:ADDI:1
131 next 2 13 130 accu_0

132 init 2 14 6
133 read 2 42 6
134 eq 1 20 6
135 and 1 26 134
136 ite 2 135 23 133
137 ite 2 54 136 14 1:0:MEM:0
138 add 2 14 7
139 ite 2 56 138 137 1:2:ADDI:1
140 next 2 14 139 accu_1

141 init 2 15 6
142 read 2 42 7
143 eq 1 21 7
144 and 1 27 143
145 ite 2 144 24 142
146 ite 2 59 145 15 2:0:MEM:1
147 eq 1 21 6
148 and 1 27 147
149 ite 2 148 24 133
150 ite 2 60 149 146 2:1:LOAD:0
151 next 2 15 150 accu_2

; mem variables - mem_<thread>
152 init 2 16 6
153 next 2 16 16 mem_0

154 init 2 17 6
155 ite 2 54 136 17 1:0:MEM:0
156 next 2 17 155 mem_1

157 init 2 18 6
158 ite 2 59 145 18 2:0:MEM:1
159 next 2 18 158 mem_2

; store buffer address variables - sb-adr_<thread>
160 init 2 19 6
161 ite 2 52 6 19 0:1:STORE:0
162 next 2 19 161 sb-adr_0

163 init 2 20 6
164 ite 2 57 7 20 1:3:STORE:1
165 next 2 20 164 sb-adr_1

166 init 2 21 6
167 next 2 21 21 sb-adr_2

; store buffer value variables - sb-val_<thread>
168 init 2 22 6
169 ite 2 52 13 22 0:1:STORE:0
170 next 2 22 169 sb-val_0

171 init 2 23 6
172 ite 2 57 14 23 1:3:STORE:1
173 next 2 23 172 sb-val_1

174 init 2 24 6
175 next 2 24 24 sb-val_2

; store buffer full variables - sb-full_<thread>
176 init 1 25 4
177 or 1 52 25
178 ite 1 48 4 177
179 next 1 25 178 sb-full_0

180 init 1 26 4
181 or 1 57 26
182 ite 1 49 4 181
183 next 1 26 182 sb-full_1

184 init 1 27 4
185 ite 1 50 4 27
186 next 1 27 185 sb-full_2

; statement activation variables - stmt_<thread>_<pc>
187 init 1 28 5
188 and 1 28 -51 0:0:ADDI:1
189 next 1 28 188 stmt_0_0

190 init 1 29 4
191 and 1 29 -52 0:1:STORE:0
192 ite 1 28 51 191 0:0:ADDI:1
193 next 1 29 192 stmt_0_1

194 init 1 30 4
195 and 1 30 -53 0:2:HALT
196 ite 1 29 52 195 0:1:STORE:0
197 next 1 30 196 stmt_0_2

198 init 1 31 5
199 and 1 31 -54 1:0:MEM:0
200 next 1 31 199 stmt_1_0

201 init 1 32 4
202 and 1 32 -55 1:1:JNZ:3
203 ite 1 31 54 202 1:0:MEM:0
204 next 1 32 203 stmt_1_1

205 init 1 33 4
206 and 1 33 -56 1:2:ADDI:1
207 neq 1 14 6
208 and 1 55 -207
209 ite 1 32 208 206 1:1:JNZ:3
210 next 1 33 209 stmt_1_2

211 init 1 34 4
212 and 1 34 -57 1:3:STORE:1
213 and 1 55 207
214 ite 1 32 213 212 1:1:JNZ:3
215 ite 1 33 56 214 1:2:ADDI:1
216 next 1 34 215 stmt_1_3

217 init 1 35 4
218 and 1 35 -58 1:4:HALT
219 ite 1 34 57 218 1:3:STORE:1
220 next 1 35 219 stmt_1_4

221 init 1 36 5
222 and 1 36 -59 2:0:MEM:1
223 next 1 36 222 stmt_2_0

224 init 1 37 4
225 and 1 37 -60 2:1:LOAD:0
226 ite 1 36 59 225 2:0:MEM:1
227 next 1 37 226 stmt_2_1

228 init 1 38 4
229 and 1 38 -61 2:2:HALT
230 ite 1 37 60 229 2:1:LOAD:0
231 next 1 38 230 stmt_2_2

; halt variables - halt_<thread>
232 init 1 39 4
233 or 1 53 39
234 next 1 39 233 halt_0

235 init 1 40 4
236 or 1 58 40
237 next 1 40 236 halt_1

238 init 1 41 4
239 or 1 61 41
240 next 1 41 239 halt_2

; heap variable
241 init 3 42 12
242 write 3 42 19 22
243 ite 3 48 242 42 flush_0
244 write 3 42 20 23
245 ite 3 49 244 243 flush_1
246 write 3 42 21 24
247 ite 3 50 246 245 flush_2
248 next 3 42 247 heap

; exit flag variable
249 init 1 43 4
250 and 1 233 236
251 and 1 239 250
252 or 1 43 251
253 next 1 43 252 exit

; exit code variable
254 init 2 44 6
255 next 2 44 44 exit-code

