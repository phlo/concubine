;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; sorts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

1 sort bitvec 1
2 sort bitvec 16
3 sort array 2 2

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; constants
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

4 zero 1
5 one 1

6 zero 2
7 one 2
8 constd 2 8

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; memory map
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

9 state 3 mmap
10 write 3 9 6 6
11 write 3 10 7 6

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; state variable declarations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; accu variables - accu_<thread>
12 state 2 accu_0
13 state 2 accu_1

; mem variables - mem_<thread>
14 state 2 mem_0
15 state 2 mem_1

; store buffer address variables - sb-adr_<thread>
16 state 2 sb-adr_0
17 state 2 sb-adr_1

; store buffer value variables - sb-val_<thread>
18 state 2 sb-val_0
19 state 2 sb-val_1

; store buffer full variables - sb-full_<thread>
20 state 1 sb-full_0
21 state 1 sb-full_1

; statement activation variables - stmt_<thread>_<pc>
22 state 1 stmt_0_0
23 state 1 stmt_0_1
24 state 1 stmt_0_2
25 state 1 stmt_0_3

26 state 1 stmt_1_0
27 state 1 stmt_1_1
28 state 1 stmt_1_2
29 state 1 stmt_1_3

; halt variables - halt_<thread>
30 state 1 halt_0
31 state 1 halt_1

; heap variable
32 state 3 heap

; exit flag variable
33 state 1 exit

; exit code variable
34 state 2 exit-code

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; input variable declarations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; thread activation variables - thread_<thread>
35 input 1 thread_0
36 input 1 thread_1

; store buffer flush variables - flush_<thread>
37 input 1 flush_0
38 input 1 flush_1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; transition variable definitions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; statement execution variables - exec_<thread>_<pc>
39 and 1 22 35 exec_0_0
40 and 1 23 35 exec_0_1
41 and 1 24 35 exec_0_2
42 and 1 25 35 exec_0_3

43 and 1 26 36 exec_1_0
44 and 1 27 36 exec_1_1
45 and 1 28 36 exec_1_2
46 and 1 29 36 exec_1_3

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; scheduling constraints
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

47 or 1 35 36
48 or 1 37 47
49 or 1 38 48
50 or 1 33 49
51 constraint 50
52 nand 1 35 36
53 nand 1 35 37
54 nand 1 35 38
55 nand 1 35 33
56 nand 1 36 37
57 nand 1 36 38
58 nand 1 36 33
59 nand 1 37 38
60 nand 1 37 33
61 nand 1 38 33
62 and 1 52 53
63 and 1 54 62
64 and 1 55 63
65 and 1 56 64
66 and 1 57 65
67 and 1 58 66
68 and 1 59 67
69 and 1 60 68
70 and 1 61 69
71 constraint 70

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; store buffer constraints
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

72 or 1 23 25
73 implies 1 72 -35
74 ite 1 20 73 -37
75 constraint 74 flush_0

76 or 1 27 29
77 implies 1 76 -36
78 ite 1 21 77 -38
79 constraint 78 flush_1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; halt constraints
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

80 implies 1 30 -35
81 constraint 80 halt_0

82 implies 1 31 -36
83 constraint 82 halt_1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; state variable definitions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; accu variables - accu_<thread>
84 init 2 12 6
85 add 2 12 7
86 ite 2 39 85 12 0:0:ADDI:1
87 read 2 32 6
88 eq 1 16 6
89 and 1 20 88
90 ite 2 89 18 87
91 eq 1 14 90
92 ite 2 91 7 6
93 ite 2 40 92 86 0:1:CAS:0
94 read 2 32 7
95 eq 1 16 7
96 and 1 20 95
97 ite 2 96 18 94
98 ite 2 41 97 93 0:2:LOAD:1
99 next 2 12 98 accu_0

100 init 2 13 6
101 add 2 13 7
102 ite 2 43 101 13 1:0:ADDI:1
103 eq 1 17 7
104 and 1 21 103
105 ite 2 104 19 94
106 eq 1 15 105
107 ite 2 106 7 6
108 ite 2 44 107 102 1:1:CAS:1
109 eq 1 17 6
110 and 1 21 109
111 ite 2 110 19 87
112 ite 2 45 111 108 1:2:LOAD:0
113 next 2 13 112 accu_1

; mem variables - mem_<thread>
114 init 2 14 6
115 next 2 14 14 mem_0

116 init 2 15 6
117 next 2 15 15 mem_1

; store buffer address variables - sb-adr_<thread>
118 init 2 16 6
119 next 2 16 16 sb-adr_0

120 init 2 17 6
121 next 2 17 17 sb-adr_1

; store buffer value variables - sb-val_<thread>
122 init 2 18 6
123 next 2 18 18 sb-val_0

124 init 2 19 6
125 next 2 19 19 sb-val_1

; store buffer full variables - sb-full_<thread>
126 init 1 20 4
127 ite 1 37 4 20
128 next 1 20 127 sb-full_0

129 init 1 21 4
130 ite 1 38 4 21
131 next 1 21 130 sb-full_1

; statement activation variables - stmt_<thread>_<pc>
132 init 1 22 5
133 and 1 22 -39 0:0:ADDI:1
134 next 1 22 133 stmt_0_0

135 init 1 23 4
136 and 1 23 -40 0:1:CAS:0
137 ite 1 22 39 136 0:0:ADDI:1
138 next 1 23 137 stmt_0_1

139 init 1 24 4
140 and 1 24 -41 0:2:LOAD:1
141 ite 1 23 40 140 0:1:CAS:0
142 next 1 24 141 stmt_0_2

143 init 1 25 4
144 and 1 25 -42 0:3:HALT
145 ite 1 24 41 144 0:2:LOAD:1
146 next 1 25 145 stmt_0_3

147 init 1 26 5
148 and 1 26 -43 1:0:ADDI:1
149 next 1 26 148 stmt_1_0

150 init 1 27 4
151 and 1 27 -44 1:1:CAS:1
152 ite 1 26 43 151 1:0:ADDI:1
153 next 1 27 152 stmt_1_1

154 init 1 28 4
155 and 1 28 -45 1:2:LOAD:0
156 ite 1 27 44 155 1:1:CAS:1
157 next 1 28 156 stmt_1_2

158 init 1 29 4
159 and 1 29 -46 1:3:HALT
160 ite 1 28 45 159 1:2:LOAD:0
161 next 1 29 160 stmt_1_3

; halt variables - halt_<thread>
162 init 1 30 4
163 or 1 42 30
164 next 1 30 163 halt_0

165 init 1 31 4
166 or 1 46 31
167 next 1 31 166 halt_1

; heap variable
168 init 3 32 11
169 write 3 32 16 18
170 ite 3 37 169 32 flush_0
171 write 3 32 6 12
172 ite 3 91 171 32
173 ite 3 40 172 170 0:1:CAS:0
174 write 3 32 17 19
175 ite 3 38 174 173 flush_1
176 write 3 32 7 13
177 ite 3 106 176 32
178 ite 3 44 177 175 1:1:CAS:1
179 next 3 32 178 heap

; exit flag variable
180 init 1 33 4
181 and 1 163 166
182 or 1 33 181
183 next 1 33 182 exit

; exit code variable
184 init 2 34 6
185 next 2 34 34 exit-code

